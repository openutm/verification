# config/default.yaml
version: "1.0" # Configuration schema version

run_id: "daily-conformance-check" # An optional identifier for the run

# Details of the Flight Blender deployment under test
flight_blender:
  url: "http://localhost:8000"
  # Auth can be 'none' or 'passport'
  auth:
    type: "none" # For using the dummy-oauth provider
    # type: "passport" # For using a real Passport instance
    # client_id: "your-client-id"
    # client_secret: "your-client-secret"
    # token_url: "/oauth/token"
    audience: "testflight.flightblender.com" # Audience for OAuth tokens, default for local testing
    scopes: ["flightblender.write", "flightblender.read"] # Scopes for write and read access

# Details for connecting to the OpenSky Network API
opensky:
  auth:
    type: "none" # 'none' for no auth, 'oauth2' for OAuth2 client credentials
    client_id: "your-client-id"
    client_secret: "your-client-secret"

data_files:
  telemetry: "config/bern/telemetry_f1.json" # Path to flight declarations JSON file
  flight_declaration: "config/bern/flight_declaration.json" # Path to flight declarations JSON file
  # geo_fence: "config/geo_fences.json" # Path to geo-fences

# List of test scenario IDs to execute
scenarios:
  "F1_happy_path":
    telemetry: "config/bern/telemetry_f1.json"
  "F2_contingent_path":
    telemetry: "config/bern/telemetry_f2.json"
  "F3_non_conforming_path":
    telemetry: "config/bern/telemetry_f3.json"
  "F5_non_conforming_path":
    telemetry: "config/bern/telemetry_f5.json"
  "opensky_live_data":
  "add_flight_declaration":
  "geo_fence_upload":

# Reporting configuration
reporting:
  output_dir: "reports"
  formats: ["json", "html", "log"] # 'json' is raw, 'html' is summarized
  # A place to add metadata about the system under test
  deployment_details:
    name: "Local Flight Blender Dev Instance"
    version: "v0.12.0"
    notes: "Running against local Docker Compose setup."
